#include<iostream>
#include<set>
using namespace std;
struct Node {
	int val;
	Node* next;
	Node(int v):val(v) { next = NULL; }
};
//using extra space
void removeDuplicate(Node* node)
{
	if (node == NULL||node->next == NULL)
		return;
	set<int> s;
	s.insert(node->val);
	while (node != NULL&&node->next != NULL)
	{
		if (s.find(node->next->val) != s.end())
		{
			node->next = node->next->next;
			continue;
		}
		s.insert(node->next->val);
		node = node->next;
	}
}
//don't use extra space
void removeDuplicate(Node* node)
{
	if (node == NULL||node->next == NULL)
		return;
	Node* n1= node;
	Node* n2 ;
	while (n1!= NULL)
	{
		n2 = n1;
		while (n2 != NULL&&n2->next != NULL) 
		{
			if (n2->next->val == n1->val) 
			{
				n2->next = n2->next->next;
				continue;
			}
			n2 = n2->next;
		}
		n1 = n1->next;
	}
}
int main()
{
	Node* head =new Node(3);
	Node* node = head;
	int i = 0;
	while (i < 10) {
		i++;
		int val;
		cin >> val;
		Node* no = new Node(val);
		node->next = no;
		node = no;
	}
	removeDuplicate(head);
}
