#include<iostream>
#include<list>
#include<queue>
using namespace std;
#define NODENUM 100
struct Graph {
	list<int> vectex[NODENUM];
	void addAge(int source, int target) {
		vectex[source].push_back(target);
	};
};
bool isConnect(const Graph& g, int source, int target) {
	if (g.vectex[source].empty())
		return false;
	list<int>::const_iterator itr;
	queue<int> q;
	q.push(source);
	while (!q.empty()) {
		int val = q.front();
		q.pop();
		for (itr = g.vectex[val].beg in(); itr != g.vectex[val].end(); itr++) {
			q.push(*itr);
			if (*itr == target)
				return true;
		}
	}
	return false;
}
int main() {
	Graph g;
	g.addAge(0, 1);
	g.addAge(1, 2);
	g.addAge(1, 3);
	g.addAge(4, 5);
	bool  b=isConnect(g, 5, 4)|| isConnect(g, 4, 5);
	cout << b << endl;
	cin.get();
}
